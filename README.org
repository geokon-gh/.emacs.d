#+TITLE: Emacs configuration for C++/CMake/git
#+DESCRIPTION: An Emacs configuration for Clojure/C++ development with orgmode

#+EXPORT_FILE_NAME: index.html
#+HTML_DOCTYPE: html5
#+HTML_LINK_UP: ..
#+HTML_LINK_HOME: ..
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../web/worg.css" />
#+HTML_HEAD_EXTRA: <link rel="shortcut icon" href="../web/panda.svg" type="image/x-icon">
#+HTML_MATHJAX: path: "../MathJax/MathJax.js?config=TeX-AMS_CHTML"
#+OPTIONS: html-style:nil
#+OPTIONS: num:nil
#+OPTIONS: html-postamble:nil
#+OPTIONS: html-scripts:nil

* Intro
I hope this emacs configuration file will help explain a little elisp and how to write your own. 

The most important take-away is understanding how emacs can help read and learn from other people's configurations. Once you know how to navigate the documentation you can pick apart any config file and expand your own

Note that I wrote this knowing no lisp at all - so if there are mistakes or you would like to make some suggestions I'd really appreciate you telling me by adding an issue on the [[https://geokon-gh.github.io/.emacs.d/][github repo]]
* General Settings
** Hack for AppImage
There is [[https://github.com/probonopd/Emacs.AppImage/issues/8][some issue]] with the way the [[https://github.com/probonopd/Emacs.AppImage/][Emacs AppImage]] is setup so it interferes with ~git~
#+BEGIN_SRC emacs-lisp :tangle init.el
  (if (getenv "APPDIR") (setenv "LD_LIBRARY_PATH" nil))
#+END_SRC
** Hide menu bars
#+BEGIN_SRC emacs-lisp :tangle init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Package managment
To begin extending Emacs we will want to be able to add external packages. Emacs comes with a built in package manager called ~package~ which we will use to get external package. We load it by using ~require~  and then we initialize it.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'package)
  (package-initialize)
#+END_SRC
To see more specifically what the ~require~ function does type ~C-h f require RET~. You'll find that virtually every function will have some associted documentation.

Note the use of a leading quote before the word ~package~; This tells emacs that the word ~package~ is a symbol. If you ommit the quote then emacs will try to evaluate ~package~ as a function and give you an error.

Next we need to tell the package manager where to look for new packages. There is a limited GNU-blessed repository called ~ELPA~, but we will also want to add another larger repository called [[https://melpa.org][~MELPA~]]. To do that we we just need to add it to the list called ~package-archives~\\
To look up a variable, use ~C-h v [variable] RET~
So type ~C-h v package-archives RET~ to see what it's for
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                           ("melpa" . "http://elpa.emacs-china.org/melpa/")))
#+END_SRC
This ~C-h [something] [something]~ pattern repeats for a lot of features. To see the complete list just enter ~C-h C-h~. These key-bindings will be your way of exploring configurations you find online.

The newer fancy way of managing package is using ~use-package~. I've included it as a git submodule in my ~.emacs.d~ directory which you can see in [[https://github.com/geokon-gh/.emacs.d][the repository]] (be sure to clone recursively if you decide to use my version). You can get it yourself manually from: https://github.com/jwiegley/use-package

Once we have it in our directory we just need to add it to the ~load-path~ and load it in using ~require~ like last time
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq
   load-path
   (cons
    (concat
     (file-name-directory load-file-name)
    "use-package")
    load-path))
  (require 'use-package)

#+END_SRC
~setq~ is the function that sets a variable to a value. The ~q~ indicates that we don't need to add a quote to the first arguement. There is also the more cumbersome ~(set 'arg1 'arg2)~. The rest of the code is there to append the new path to ~use-package~ correctly to the existing ~load-path~.
# TODO: figure out why a lot of people have
# (setq package-enable-at-startup nil)
# at the top of their init file and then a
# (package-initialize)
# at the end..
** Auto-update
This will make the packages update to the latest version every few days
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package auto-package-update
  ;;    :ensure t
  ;;    :config
  ;;    (setq auto-package-update-delete-old-versions t
  ;;          auto-package-update-interval 4)
  ;;    (auto-package-update-maybe))
#+END_SRC
** Import shell variables
Especially when we launch emacs in daemon mode, the environmental variables won't be set up. So for example it won't find executables in the PATH b/c the PATH won't be set up the way you have it in your =.bashrc= file. So there is a special package to fix that
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package exec-path-from-shell
  :ensure t
  :config
  (unless (memq system-type '(ms-dos windos-nt cygwin))
    (exec-path-from-shell-initialize)))
#+END_SRC
** Indentation - Change the default indentation from 2 spaces to 4
Indentation is generally govered by two variables\\ 
~default-tab-width~ - this is the variable for any text document when you normally type in a TAB\\
~c-basic-offset~ - when working with source code the indentation is done automatically and based on this offset value  (a lot of modes derive from ~c-mode~, hence the name) \\ 
More info: https://kb.iu.edu/d/abde \\ 
#+BEGIN_SRC emacs-lisp :tangle init.el
;  (setq c-basic-offset 4)
#+END_SRC

in ELisp it's also a bit hard to see the indentation level, so I like to add this guide  (*REMOVED*)
#+BEGIN_SRC emacs-lisp :tangle init.el
;; (use-package indent-guide
;;    :ensure t
;;    :config
;;   (indent-guide-global-mode))
#+END_SRC

Trying out the very weird Parinfer mode (this code is straight copied from [[https://github.com/DogLooksGood/parinfer-mode][their github]]
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package parinfer
    :ensure t
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults       ; should be included.
               pretty-parens  ; different paren styles for different modes.
               evil           ; If you use Evil.
               lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
               paredit        ; Introduce some paredit commands.
               smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
               smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
** Line wrap
Next we need to enable line-wrap in org mode. By default, as you keep typing the page scrolls to the right. So a whole paragraph will appear as one line making it difficult to navigate
#+BEGIN_SRC emacs-lisp :tangle init.el
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
#+END_SRC
again, don't hesitate to look up all the variables and function. Hooks are in general places where you can add function to be called at designated times. Here it's a function that sets a variable each time org-mode is enabled.
** Theme
This is the only decent light theme I could find. The advantage over the default theme is that it will color a more things in more modes. The most important to me me is that it will color code blocks in org-mode
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package moe-theme
  ;;   :ensure t
  ;;   :config
  ;;   (moe-light)
  ;;   (set-face-attribute 'default nil :background "#ffffff" :foreground "#5f5f5f"))
  (use-package leuven-theme
    :ensure t)

#+END_SRC
The last line makes the background white (instead of yellow)
** Git
For using git we want to have a couple of tools
** Autosave/Backup files
By default Emacs will save copies of files with a ~~~ appended. This ends up cluttering directories and makes any directory touched by Emacs a bit of a mess. Instead we can have Emacs save files to a central directory.

See: https://www.emacswiki.org/emacs/BackupDirectory and https://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2)
#+END_SRC
*** Magit
This is the tool for inspecting and updating out git repository. It's a little complicated to use, so look up documentation for it. It is a must for development in emacs if you use ~git~ - so make the investment and learn to use it.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package magit
    :ensure t)
#+END_SRC
*** Projectile
This will manage our workspaces. Each workspace will be tied to a git repository. This makes it so that our buffer list doesn't get really crowded when we are working on multiple projects
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package projectile
    :ensure t
    :config
    (projectile-mode))
#+END_SRC
I sometimes use this - and other times I just run separate emacs sessions for different projects.

** images
When you open a GIF, make it loop forever (instead of playing through once and stopping
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq image-animate-loop t)
#+END_SRC
Hit ~RET~ to have it start playing
** system-monitor
A tiny in-bar system monitor is convenient (and doesn't need to be part of my desktop).
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package symon
  ;;   :ensure t
  ;;   :config
  ;;   (add-to-list 'symon-monitors 'symon-linux-battery-monitor)
  ;;   (symon-mode))
#+END_SRC

** which-key
This is gunna give us tips for different modes so we can learn new key-combos
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package which-key
    :ensure t)
#+END_SRC
* Standardizing (WIP)
These are some changes that bring Emacs more in line with how modern applications work. Most people don't do this.. I'm giving it a try
** Overwrite selection
This will make it so that if you start typing after selecting some text it will actually overwrite what you selected instead of ignoring the selection and appending to the end. See: https://www.gnu.org/software/emacs/manual/html_node/efaq/Replacing-highlighted-text.html
#+BEGIN_SRC emacs-lisp :tangle init.el
  (delete-selection-mode 1)
#+END_SRC
** CUA Mode
This is the standard copy-cut-paste shortcuts that are different in Emacs by default. By restoring them to the standard =Ctrl C/X/V= it will interfere with some existing shortcuts in Emacs. So now whenever you see a =Ctrl C= You need to hit =Ctrl C C=. Off the top of my head I know this affects =CIDER= (Clojure code) and =orgmode=.
#+BEGIN_SRC emacs-lisp :tangle init.el
;  (cua-mode t)
#+END_SRC
* Orgmode
** Some adjustments to org-mode
see [[http://howardism.org/Technical/Emacs/literate-programming-tutorial.html][here]] for reference \\
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq org-confirm-babel-evaluate nil ;; don't prompt for confirmation about executing a block
	org-src-tab-acts-natively t
	org-use-sub-superscripts '{}
	org-src-fontify-natively t
        org-clock-into-drawer nil
        org-export-backends (quote (ascii html latex md odt))
	org-cycle-emulate-tab 'white)
  (use-package htmlize
    :ensure t)
#+END_SRC
 - Turns off the annoying "are you sure?" prompts on tangle export \\
 - Makes tabs work in the source code blocks the same as it would in a buffer with that source code \\
 - Makes it so underscores aren't interpreted as subscripts unless used with braces \\
(I often need underscores for file/variable names) \\
 - Make source code gets colored based on the language \\
 - Newer version of Orgmode stick clocks into logbooks which aren't useful for me \\
 - Enable exporting to Markdown (for a full set of options run ~customize-option~ then enter ~org-export-backends~ (editing this will modify your =init.el=)
 - Make collapsing and expanding sections with the TAB button work everywhere (except where it makes sense to insert an actual /tab/)
 - ~htmlize~ will colorize orgmode code-blocks code in the exported HTML
For more info on any of these variables, again, use ~C-h v [variable] RET~
** Plotting
For one of my ongoing "project" I want my ELisp code to be able to output plots. For that we need to add ~gnuplot~ and then [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html#org66dbe2c][enable execution]] of ~gnuplot~ blocks in ~orgmode~. The last line lets me make plots interactively in the ~gnuplot~ buffer
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package gnuplot
      :ensure t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t)))

  (gnuplot-inline-display-mode)
#+END_SRC
* C++ 
Here we'll setup a development environment as feature rich as an IDE \\
We're going to use the new language server protocol way (instead of rtags as before). I'm just following [[https://github.com/cquery-project/cquery/wiki/Emacs][the official guide]]
** lsp-mode
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package lsp-mode
  ;;   :ensure t)
#+END_SRC
** emacs-cquery
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package emacs-cquery
  ;;   :commands lsp-cquery-enable
  ;;   :init (setq cquery-executable "~/Programs/cquery/bin/cquery")
  ;;   (add-hook 'c-mode-hook #'cquery//enable)
  ;;   (add-hook 'c++-mode-hook #'cquery//enable)
  ;;   :ensure t)
#+END_SRC
* Clojure
(WIP)
Add support in Org-Mode. From https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure-literate.html
Seems broken for the time being for some reason...
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package ob-clojure-literate
  ;;   :ensure t
  ;;   :after org
  ;;   :init
  ;;   (setq ob-clojure-literate-auto-jackin-p t)
  ;;   (add-hook 'org-mode-hook #'ob-clojure-literate-mode))
#+END_SRC

Starting to play around with ~Clojure~. The canonical ~Clojure~ development environment is ~CIDER~
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package cider
    :ensure t
    :init (setq org-babel-clojure-backend 'cider))
#+END_SRC
# * Company
# Next we turn on ~company~. The package that will do autocompletion for us (it standards for COMPlete ANYthing)
# #+BEGIN_SRC emacs-lisp :tangle init.el
#   (use-package company
#     :config
#     (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
#     (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion))
#     ;(push 'company-rtags company-backends) TODO: FIX this RTags related stuff!
#     ;(global-company-mode)
#     ;(define-key c-mode-base-map (kbd "<C-tab>") (function company-complete)))
# #+END_SRC
# looking at the documentation we see that ~push~ will take the 1st argument and add it to the beginning of the list provided in the 2nd argument. ~company-backends~ is "a list of active backends (completion engines)". ~company-rtags~ is a backend provided by the ~rtags~ guys. See the documentation for more info :)
